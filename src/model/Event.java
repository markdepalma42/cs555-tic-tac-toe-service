package model;

/**
 * Models a game lifecycle in the TicTacToe game, tracking events from initial invitation
 * through completion or termination. Each Event represents a game session between two players
 * and maps directly to the 'Event' table in the central database.
 *
 * Event objects are used to store game events from initial game initiation to when a game
 * is completed or aborted. The eventId is autogenerated by the central database when an
 * invitation is created and serves as the unique identifier for game sessions.
 *
 * This class is serialized and exchanged between client and server to maintain synchronized
 * game state across the system.
 */

//Class definition
public class Event {
   
    //class attributes
    /**
     * A globally unique integer representing an event, autogenerated by the central database
     * at the point of invitation creation. Used as the primary key in the database table 'Event'.
     */
    private int eventId;

    /**
     * The username of the user who sends the game invitation
     */
    private String sender;

    /**
     * The username of the user that the game invitation was sent to
     */
    private String opponent;

    /**
     * The current status of the game in its lifecycle. It is of type ParingStatus
     */
    private EventStatus status;

    /**
     * The username of the player to make the last move
     */
    private String turn;

    /**
     * An integer storing the last move of the game
     */
    private int move;

    //default constructor
    /**
     * Default constructor that creates an Event with default values.
     * Used for initialization before populating with database values.
     */
    public Event() {
        this.eventId = 0;
        this.sender = "";
        this.opponent = "";
        this.status = null;
        this.turn = "";
        this.move = 0;
    }


    //constructor that sets all attributes
    /**
     * Creates a complete Event with all attributes. Typically used when constructing
     * events from database records or when creating new game sessions.
     *
     * @param eventId the globally unique identifier autogenerated by the database
     * @param sender the username of the player sending the invitation
     * @param opponent the username of the player receiving the invitation
     * @param status the current status of the game lifecycle
     * @param turn the username of the player who made the last move
     * @param move the integer representing the last move made in the game
     */
    public Event(int eventId, String sender, String opponent, EventStatus status, String turn, int move) {
        this.eventId = eventId;
        this.sender = sender;
        this.opponent = opponent;
        this.status = status;
        this.turn = turn;
        this.move = move;
    }

    /**
     * Returns the globally unique event identifier autogenerated by the database.
     *
     * @return the event ID that uniquely identifies this game session
     */
    //getters and setters for all attributes
    public int getEventId() {
        return eventId;
    }

    /**
     * Returns the username of the player who initiated the game invitation.
     *
     * @return the sender's username
     */
    public String getSender() {
        return sender;
    }

    /**
     * Returns the username of the player who received the game invitation.
     *
     * @return the opponent's username
     */
    public String getOpponent() {
        return opponent;
    }

    /**
     * Returns the current status of the game in its lifecycle.
     *
     * @return the event status indicating the current phase of the game
     */
    public EventStatus getStatus() {
        return status;
    }

    /**
     * Returns the username of the player who made the last move.
     *
     * @return the username of the player whose turn it was last
     */
    public String getTurn() {
        return turn;
    }

    /**
     * Returns the integer representing the last move made in the game.
     *
     * @return the last move value
     */
    public int getMove() {
        return move;
    }

    /**
     * Sets the globally unique event identifier. Typically set by the database
     * when a new invitation is created.
     *
     * @param eventId the unique event ID to set
     */
    public void setEventId(int eventId) {
        this.eventId = eventId;
    }

    /**
     * Sets the username of the player who sent the game invitation.
     *
     * @param sender the sender's username to set
     */
    public void setSender(String sender) {
        this.sender = sender;
    }

    /**
     * Sets the username of the player who received the game invitation.
     *
     * @param opponent the opponent's username to set
     */
    public void setOpponent(String opponent) {
        this.opponent = opponent;
    }

    /**
     * Updates the status of the game as it progresses through its lifecycle.
     * Status changes are triggered by specific client request types.
     *
     * @param status the new event status to set
     */
    public void setStatus(EventStatus status) {
        this.status = status;
    }

    /**
     * Updates which player made the last move in the active game.
     *
     * @param turn the username of the player who made the last move
     */
    public void setTurn(String turn) {
        this.turn = turn;
    }

    /**
     * Updates the last move made in the game.
     *
     * @param move the integer value representing the last move
     */
    public void setMove(int move) {
        this.move = move;
    }

    //equals() method
    /**
     * Compares this event to the specified object for equality. Two events are
     * considered equal if they have the same eventId, as this is the globally
     * unique identifier autogenerated by the database.
     *
     * @param o the object to compare this Event against
     * @return true if the given object represents an Event with the same eventId
     */
    @Override
    public boolean equals(Object o) {
        //check for reference equality
        if (this == o) return true;
        //check for null and class type equality
        if (o == null || getClass() != o.getClass()) return false;
        //cast the object and compare the unique attribute
        Event event = (Event) o;
        return eventId == event.eventId;

    }

    //Enumeration for EventStatus
    /**
     * Enumeration defining the possible states of a game event throughout its lifecycle.
     * Each status corresponds to specific client request types that trigger state transitions.
     */
    public enum EventStatus {
        /**
         * Initial status set when a client sends a SEND_INVITATION request.
         * Represents an invitation that has been sent and is awaiting response.
         */
        PENDING,

        /**
         * Status set when a client sends a DECLINE_INVITATION request.
         * Represents an invitation that has been declined by the opponent.
         */
        DECLINED,

        /**
         * Status set when a client sends an ACCEPT_INVITATION request.
         * Represents an invitation that has been accepted by the opponent.
         */
        ACCEPTED,

        /**
         * Status set when a client sends an ACKNOWLEDGE_RESPONSE request.
         * Represents a game that is currently in progress between the players.
         */
        PLAYING,

        /**
         * Status set when a client sends a request indicating game completion.
         * Represents a game that has been completed normally with a winner.
         */
        COMPLETED,

        /**
         * Status set when a game is terminated before normal completion.
         * Represents a game that was aborted prematurely.
         */
        ABORTED
    }

}
